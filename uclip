#!/bin/bash -e

## UClip is an online clipboard that lets you copy & paste data across devices over the internet using CLI commands.
## This tool is powered by the free online service https://cl1p.net (PS: I am not affiliated with this site in any way).
## Since the tool uses a public service, avoid copying any sensitive data. I take no liability of how you use this tool.
## Run 'uclip help' for usage details.
## CLI Dependencies: curl, base64, openssl (if using encryption), pbcopy/pbpaste (MAC OS)
## TODO: consider integrating with https://github.com/sindresorhus/clipboard-cli for cross-platform local clipboard operations
## TODO: Use clipboard events to automatically push & pull!

VERSION="1.0"

if [ -z $1 ] || [ "$1" == "help" ]
then
  # Help text
  echo "----- UClip Utility Tool -----"
  echo "Powered by https://cl1p.net"
  echo "Version: v$VERSION"
  echo
  echo "Available sub-commands:"
  echo "* login: Setup your clipboard id & optionally your encryption key"
  echo "    The 'UClip ID' must be URL compatible. It is the unique ID at which your clipboard will be hosted online"
  echo "    The 'Encryption Key' is used in the AES 256 crypto algorithm to protect others from reading your data"
  echo "* logout: Clear your stored clipboard id & encryption key"
  echo "* write: Write data from STD-IN to the online clipboard"
  echo "    Useful with the pipe operator to copy the output from a command"
  echo "    You can paste text directly into the terminal and terminate the input using 'Ctrl + D' (EOF in most shells)"
  echo "* push: Publish text currently on your local clipboard to the online clipboard (i.e. copy from local clipboard and paste to online clipboard)"
  echo "    Warning: Implemented only for MAC OS as of now (uses pbcopy)"
  echo "* read: Read data from the online clipboard and output it to STD-OUT"
  echo "    Useful to pipe it to another command, or redirect output to a file, or copy to local clipboard using clip/xclip/pbcopy"
  echo "    Note: reading clears the online clipboard"
  echo "* pull: Populate text currently on the online clipboard to your local clipboard (i.e. copy from online clipboard and paste to local clipboard)"
  echo "    Warning: Implemented only for MAC OS as of now (uses pbpaste)"
  echo "------------------------------"
  echo
  echo "Happy clipping... !!"
  echo
  exit 0
fi

# State file
CREDS_FILE="$HOME/.uclip"

# Implementation
function error {
  # Log an error message to stderr and exit
  echo $1 >&2
  exit 1
}

function validate {
  # Validate ADDRESS & PASSWORD
  [[ "$ADDRESS" =~ ^[[:alnum:]_-]{1,100}$ ]] || error "UClip ID can only contain alphabets, numbers, hyphen, underscore"
  [[ "$PASSWORD" =~ ^[[:alnum:]_-]{0,100}$ ]] || error "Encryption can only contain alphabets, numbers, hyphen, underscore"
}

function login {
  # Set up state
  echo -n "Enter UClip ID (1 word, letters/numbers/hyphen/underscore): "
  read ADDRESS
  validate
  echo -n "Enter encryption string (1 word, letters/numbers/hyphen/underscore) (optional): "
  read PASSWORD
  validate
  echo "$ADDRESS $PASSWORD" | base64 > "$CREDS_FILE"
}

function logout {
  # Clear state
  echo "Old Creds: $ADDRESS / $PASSWORD"
  rm -f "$CREDS_FILE"
}

function creds {
  # Load state
  if [ -z "$UCLIP_ID" ]
  then
    [ -s "$CREDS_FILE" ] || error "UClip not initialized, run 'uclip login'."
    CREDS_DATA=$(cat "$CREDS_FILE" | base64 --decode)
    read ADDRESS PASSWORD <<< "$CREDS_DATA"
    [ -z "$ADDRESS" ] && logout && error "Credentials file is corrupted. Logged out."
  else
    ADDRESS="$UCLIP_ID"
    PASSWORD="$UCLIP_KEY"
  fi
  validate
}

function encrypt {
  # Encrypt / encode content
  if [ -z "$PASSWORD" ]
  then
    CONTENT=$(echo "$CONTENT" | openssl aes-256-cbc -a -base64 -salt -pass "pass:$PASSWORD")
  else
    CONTENT=$(echo "$CONTENT" | base64)
  fi
}

function decrypt {
  # Decrypt / decode content
  if [ -z "$PASSWORD" ]
  then
    CONTENT=$(echo "$CONTENT" | openssl aes-256-cbc -d -a -base64 -pass "pass:$PASSWORD")
  else
    CONTENT=$(echo "$CONTENT" | base64 --decode)
  fi
}

function online_clipboard_write {
  # Write content to online clipboard
  CODE=$(curl --request POST --silent --write-out "%{http_code}" "https://api.cl1p.net/$ADDRESS" --header "Content-Type: text/plain" --data-raw "$CONTENT")
  [ "$CODE" -ne "409" ] || error "Data already exists on clipboard. Read it before writing again."
  [ "$CODE" -eq "201" ] || error "Write API did not respond correctly."
}

function online_clipboard_read {
  # Read content to online clipboard
  # Note: Clears online clipboard
  CONTENT=$(curl --silent "https://api.cl1p.net/$ADDRESS")
  [ -n "$CONTENT" ] || error "No content on clipboard."
}

function stdout_write {
  # Write content to stdout
  echo -n "$CONTENT"
  # We don't want a new line on stdout since the pipe operator will read that extra character, while it wasn't there in the original text!
  # So we put the new line on stderr instead for cleanliness
  echo >&2
}

function stdin_read {
  # Read all content from stdin
  # Content typed / pasted needs to be terminated with an EOF (Ctrl-D)
  CONTENT=`cat`
}

function local_clipboard_write {
  # Write content to local clipboard
  echo "$CONTENT" | pbcopy
}

function local_clipboard_read {
  # Read content from local clipboard
  CONTENT=$(pbpaste)
  [ -n "$CONTENT" ] || error "No text found on clipboard."
}

# Ensure no extra params in command
[ $# -le 1 ] || error "Too many parameters. Run 'uclip help'."

# Handle login flow
if [ "login" == "$1" ]
then
  login
  creds
  exit 0
fi

# Get credentials
creds

# Handle sub-commands
case "$1" in
logout)
  logout
  ;;
write)
  stdin_read
  encrypt
  online_clipboard_write
  ;;
push)
  local_clipboard_read
  encrypt
  online_clipboard_write
  ;;
read)
  online_clipboard_read
  decrypt
  stdout_write
  ;;
pull)
  online_clipboard_read
  decrypt
  local_clipboard_write
  ;;
*)
  error "Unknown sub-command '$1'. Run 'uclip help'."
  ;;
esac
